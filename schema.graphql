type InstrumentPosition @entity {
  id: ID!
  instrumentAddress: Bytes!
  account: Bytes!
  cost: BigInt!
  exercised: Boolean!
  amount: BigInt!
  optionTypes: [Int!]!
  strikePrices: [BigInt!]!
  venues: [String!]!
  expiry: BigInt!
  exerciseProfit: BigInt
}

type Vault @entity {
  id: ID! # vault contract address
  name: String!
  symbol: String!
  totalPremiumEarned: BigInt!
  totalWithdrawalFee: BigInt!
  numDepositors: Int!
  depositors: [Bytes!]!
  vaultAccounts: [VaultAccount!]! @derivedFrom(field: "vault")
}

type VaultShortPosition @entity {
  id: ID! # option contract address
  vault: Vault!
  option: Bytes!
  depositAmount: BigInt!
  initiatedBy: Bytes!
  strikePrice: BigInt!
  expiry: BigInt!
  openedAt: BigInt!
  closedAt: BigInt
  premiumEarned: BigInt!
  trades: [VaultOptionTrade!]! @derivedFrom(field: "vaultShortPosition")
}

type VaultOptionTrade @entity {
  id: ID! # optionToken-txhash-logindex
  vault: Vault!
  vaultShortPosition: VaultShortPosition!
  buyer: Bytes!
  sellAmount: BigInt!
  premium: BigInt!
  optionToken: Bytes!
  premiumToken: Bytes!
  timestamp: BigInt!
  txhash: Bytes!
}

type VaultTransaction @entity {
  id: ID!
  vault: Vault!
  type: String!
  address: Bytes!
  txhash: Bytes!
  timestamp: BigInt!
  amount: BigInt!
  fee: BigInt!
}

type VaultAccount @entity {
  id: ID! # vaultAddress-accountAddress
  vault: Vault!
  account: Account!
}

type Account @entity {
  id: ID! # Ethereum account address
}

type BalanceUpdate @entity {
  id: ID! # accountAddress-timestamp
  vault: Vault!
  account: Account!
  timestamp: Int!
  balance: BigInt!
}
