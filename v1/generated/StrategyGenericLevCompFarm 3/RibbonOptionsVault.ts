// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CapSet extends ethereum.Event {
  get params(): CapSet__Params {
    return new CapSet__Params(this);
  }
}

export class CapSet__Params {
  _event: CapSet;

  constructor(event: CapSet) {
    this._event = event;
  }

  get oldCap(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newCap(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get manager(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class CloseShort extends ethereum.Event {
  get params(): CloseShort__Params {
    return new CloseShort__Params(this);
  }
}

export class CloseShort__Params {
  _event: CloseShort;

  constructor(event: CloseShort) {
    this._event = event;
  }

  get options(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get withdrawAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get manager(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get share(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ManagerChanged extends ethereum.Event {
  get params(): ManagerChanged__Params {
    return new ManagerChanged__Params(this);
  }
}

export class ManagerChanged__Params {
  _event: ManagerChanged;

  constructor(event: ManagerChanged) {
    this._event = event;
  }

  get oldManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Migrate extends ethereum.Event {
  get params(): Migrate__Params {
    return new Migrate__Params(this);
  }
}

export class Migrate__Params {
  _event: Migrate;

  constructor(event: Migrate) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get replacement(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OpenShort extends ethereum.Event {
  get params(): OpenShort__Params {
    return new OpenShort__Params(this);
  }
}

export class OpenShort__Params {
  _event: OpenShort;

  constructor(event: OpenShort) {
    this._event = event;
  }

  get options(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get depositAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get manager(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VaultSunset extends ethereum.Event {
  get params(): VaultSunset__Params {
    return new VaultSunset__Params(this);
  }
}

export class VaultSunset__Params {
  _event: VaultSunset;

  constructor(event: VaultSunset) {
    this._event = event;
  }

  get replacement(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get share(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WithdrawToV1Vault extends ethereum.Event {
  get params(): WithdrawToV1Vault__Params {
    return new WithdrawToV1Vault__Params(this);
  }
}

export class WithdrawToV1Vault__Params {
  _event: WithdrawToV1Vault;

  constructor(event: WithdrawToV1Vault) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldShares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get newShares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WithdrawalFeeSet extends ethereum.Event {
  get params(): WithdrawalFeeSet__Params {
    return new WithdrawalFeeSet__Params(this);
  }
}

export class WithdrawalFeeSet__Params {
  _event: WithdrawalFeeSet;

  constructor(event: WithdrawalFeeSet) {
    this._event = event;
  }

  get oldFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RibbonOptionsVault__withdrawAmountWithSharesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class RibbonOptionsVault extends ethereum.SmartContract {
  static bind(address: Address): RibbonOptionsVault {
    return new RibbonOptionsVault("RibbonOptionsVault", address);
  }

  MINIMUM_SUPPLY(): BigInt {
    let result = super.call("MINIMUM_SUPPLY", "MINIMUM_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MINIMUM_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_SUPPLY",
      "MINIMUM_SUPPLY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SWAP_CONTRACT(): Address {
    let result = super.call("SWAP_CONTRACT", "SWAP_CONTRACT():(address)", []);

    return result[0].toAddress();
  }

  try_SWAP_CONTRACT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "SWAP_CONTRACT",
      "SWAP_CONTRACT():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  USDC(): Address {
    let result = super.call("USDC", "USDC():(address)", []);

    return result[0].toAddress();
  }

  try_USDC(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDC", "USDC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  accountVaultBalance(account: Address): BigInt {
    let result = super.call(
      "accountVaultBalance",
      "accountVaultBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_accountVaultBalance(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accountVaultBalance",
      "accountVaultBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  adapter(): Address {
    let result = super.call("adapter", "adapter():(address)", []);

    return result[0].toAddress();
  }

  try_adapter(): ethereum.CallResult<Address> {
    let result = super.tryCall("adapter", "adapter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  asset(): Address {
    let result = super.call("asset", "asset():(address)", []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("asset", "asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assetAmountToShares(assetAmount: BigInt): BigInt {
    let result = super.call(
      "assetAmountToShares",
      "assetAmountToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assetAmount)]
    );

    return result[0].toBigInt();
  }

  try_assetAmountToShares(assetAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assetAmountToShares",
      "assetAmountToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assetAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assetBalance(): BigInt {
    let result = super.call("assetBalance", "assetBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_assetBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("assetBalance", "assetBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cap(): BigInt {
    let result = super.call("cap", "cap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cap", "cap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentOption(): Address {
    let result = super.call("currentOption", "currentOption():(address)", []);

    return result[0].toAddress();
  }

  try_currentOption(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "currentOption",
      "currentOption():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentOptionExpiry(): BigInt {
    let result = super.call(
      "currentOptionExpiry",
      "currentOptionExpiry():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentOptionExpiry(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentOptionExpiry",
      "currentOptionExpiry():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delay(): BigInt {
    let result = super.call("delay", "delay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_delay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("delay", "delay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  instantWithdrawalFee(): BigInt {
    let result = super.call(
      "instantWithdrawalFee",
      "instantWithdrawalFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_instantWithdrawalFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "instantWithdrawalFee",
      "instantWithdrawalFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isPut(): boolean {
    let result = super.call("isPut", "isPut():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPut(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPut", "isPut():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockedAmount(): BigInt {
    let result = super.call("lockedAmount", "lockedAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockedAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockedAmount", "lockedAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockedRatio(): BigInt {
    let result = super.call("lockedRatio", "lockedRatio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockedRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockedRatio", "lockedRatio():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxWithdrawAmount(account: Address): BigInt {
    let result = super.call(
      "maxWithdrawAmount",
      "maxWithdrawAmount(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_maxWithdrawAmount(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxWithdrawAmount",
      "maxWithdrawAmount(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxWithdrawableShares(): BigInt {
    let result = super.call(
      "maxWithdrawableShares",
      "maxWithdrawableShares():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxWithdrawableShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxWithdrawableShares",
      "maxWithdrawableShares():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextOption(): Address {
    let result = super.call("nextOption", "nextOption():(address)", []);

    return result[0].toAddress();
  }

  try_nextOption(): ethereum.CallResult<Address> {
    let result = super.tryCall("nextOption", "nextOption():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nextOptionReadyAt(): BigInt {
    let result = super.call(
      "nextOptionReadyAt",
      "nextOptionReadyAt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextOptionReadyAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextOptionReadyAt",
      "nextOptionReadyAt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  replacementVault(): Address {
    let result = super.call(
      "replacementVault",
      "replacementVault():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_replacementVault(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "replacementVault",
      "replacementVault():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalBalance(): BigInt {
    let result = super.call("totalBalance", "totalBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalBalance", "totalBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawAmountWithShares(
    share: BigInt
  ): RibbonOptionsVault__withdrawAmountWithSharesResult {
    let result = super.call(
      "withdrawAmountWithShares",
      "withdrawAmountWithShares(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(share)]
    );

    return new RibbonOptionsVault__withdrawAmountWithSharesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_withdrawAmountWithShares(
    share: BigInt
  ): ethereum.CallResult<RibbonOptionsVault__withdrawAmountWithSharesResult> {
    let result = super.tryCall(
      "withdrawAmountWithShares",
      "withdrawAmountWithShares(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(share)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RibbonOptionsVault__withdrawAmountWithSharesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _factory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _registry(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _usdc(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _swapContract(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _tokenDecimals(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get _minimumSupply(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _isPut(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CloseShortCall extends ethereum.Call {
  get inputs(): CloseShortCall__Inputs {
    return new CloseShortCall__Inputs(this);
  }

  get outputs(): CloseShortCall__Outputs {
    return new CloseShortCall__Outputs(this);
  }
}

export class CloseShortCall__Inputs {
  _call: CloseShortCall;

  constructor(call: CloseShortCall) {
    this._call = call;
  }
}

export class CloseShortCall__Outputs {
  _call: CloseShortCall;

  constructor(call: CloseShortCall) {
    this._call = call;
  }
}

export class CommitAndCloseCall extends ethereum.Call {
  get inputs(): CommitAndCloseCall__Inputs {
    return new CommitAndCloseCall__Inputs(this);
  }

  get outputs(): CommitAndCloseCall__Outputs {
    return new CommitAndCloseCall__Outputs(this);
  }
}

export class CommitAndCloseCall__Inputs {
  _call: CommitAndCloseCall;

  constructor(call: CommitAndCloseCall) {
    this._call = call;
  }

  get optionTerms(): CommitAndCloseCallOptionTermsStruct {
    return this._call.inputValues[0].value.toTuple() as CommitAndCloseCallOptionTermsStruct;
  }
}

export class CommitAndCloseCall__Outputs {
  _call: CommitAndCloseCall;

  constructor(call: CommitAndCloseCall) {
    this._call = call;
  }
}

export class CommitAndCloseCallOptionTermsStruct extends ethereum.Tuple {
  get underlying(): Address {
    return this[0].toAddress();
  }

  get strikeAsset(): Address {
    return this[1].toAddress();
  }

  get collateralAsset(): Address {
    return this[2].toAddress();
  }

  get expiry(): BigInt {
    return this[3].toBigInt();
  }

  get strikePrice(): BigInt {
    return this[4].toBigInt();
  }

  get optionType(): i32 {
    return this[5].toI32();
  }

  get paymentToken(): Address {
    return this[6].toAddress();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositETHCall extends ethereum.Call {
  get inputs(): DepositETHCall__Inputs {
    return new DepositETHCall__Inputs(this);
  }

  get outputs(): DepositETHCall__Outputs {
    return new DepositETHCall__Outputs(this);
  }
}

export class DepositETHCall__Inputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class DepositETHCall__Outputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawFromShortCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawFromShortCall__Inputs {
    return new EmergencyWithdrawFromShortCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawFromShortCall__Outputs {
    return new EmergencyWithdrawFromShortCall__Outputs(this);
  }
}

export class EmergencyWithdrawFromShortCall__Inputs {
  _call: EmergencyWithdrawFromShortCall;

  constructor(call: EmergencyWithdrawFromShortCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawFromShortCall__Outputs {
  _call: EmergencyWithdrawFromShortCall;

  constructor(call: EmergencyWithdrawFromShortCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _initCap(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _tokenName(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _tokenSymbol(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MigrateCall extends ethereum.Call {
  get inputs(): MigrateCall__Inputs {
    return new MigrateCall__Inputs(this);
  }

  get outputs(): MigrateCall__Outputs {
    return new MigrateCall__Outputs(this);
  }
}

export class MigrateCall__Inputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class MigrateCall__Outputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RollToNextOptionCall extends ethereum.Call {
  get inputs(): RollToNextOptionCall__Inputs {
    return new RollToNextOptionCall__Inputs(this);
  }

  get outputs(): RollToNextOptionCall__Outputs {
    return new RollToNextOptionCall__Outputs(this);
  }
}

export class RollToNextOptionCall__Inputs {
  _call: RollToNextOptionCall;

  constructor(call: RollToNextOptionCall) {
    this._call = call;
  }
}

export class RollToNextOptionCall__Outputs {
  _call: RollToNextOptionCall;

  constructor(call: RollToNextOptionCall) {
    this._call = call;
  }
}

export class SellOptionsCall extends ethereum.Call {
  get inputs(): SellOptionsCall__Inputs {
    return new SellOptionsCall__Inputs(this);
  }

  get outputs(): SellOptionsCall__Outputs {
    return new SellOptionsCall__Outputs(this);
  }
}

export class SellOptionsCall__Inputs {
  _call: SellOptionsCall;

  constructor(call: SellOptionsCall) {
    this._call = call;
  }

  get order(): SellOptionsCallOrderStruct {
    return this._call.inputValues[0].value.toTuple() as SellOptionsCallOrderStruct;
  }
}

export class SellOptionsCall__Outputs {
  _call: SellOptionsCall;

  constructor(call: SellOptionsCall) {
    this._call = call;
  }
}

export class SellOptionsCallOrderStruct extends ethereum.Tuple {
  get nonce(): BigInt {
    return this[0].toBigInt();
  }

  get expiry(): BigInt {
    return this[1].toBigInt();
  }

  get signer(): SellOptionsCallOrderSignerStruct {
    return this[2].toTuple() as SellOptionsCallOrderSignerStruct;
  }

  get sender(): SellOptionsCallOrderSenderStruct {
    return this[3].toTuple() as SellOptionsCallOrderSenderStruct;
  }

  get affiliate(): SellOptionsCallOrderAffiliateStruct {
    return this[4].toTuple() as SellOptionsCallOrderAffiliateStruct;
  }

  get signature(): SellOptionsCallOrderSignatureStruct {
    return this[5].toTuple() as SellOptionsCallOrderSignatureStruct;
  }
}

export class SellOptionsCallOrderSignerStruct extends ethereum.Tuple {
  get kind(): Bytes {
    return this[0].toBytes();
  }

  get wallet(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get id(): BigInt {
    return this[4].toBigInt();
  }
}

export class SellOptionsCallOrderSenderStruct extends ethereum.Tuple {
  get kind(): Bytes {
    return this[0].toBytes();
  }

  get wallet(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get id(): BigInt {
    return this[4].toBigInt();
  }
}

export class SellOptionsCallOrderAffiliateStruct extends ethereum.Tuple {
  get kind(): Bytes {
    return this[0].toBytes();
  }

  get wallet(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get id(): BigInt {
    return this[4].toBigInt();
  }
}

export class SellOptionsCallOrderSignatureStruct extends ethereum.Tuple {
  get signatory(): Address {
    return this[0].toAddress();
  }

  get validator(): Address {
    return this[1].toAddress();
  }

  get version(): Bytes {
    return this[2].toBytes();
  }

  get v(): i32 {
    return this[3].toI32();
  }

  get r(): Bytes {
    return this[4].toBytes();
  }

  get s(): Bytes {
    return this[5].toBytes();
  }
}

export class SetCapCall extends ethereum.Call {
  get inputs(): SetCapCall__Inputs {
    return new SetCapCall__Inputs(this);
  }

  get outputs(): SetCapCall__Outputs {
    return new SetCapCall__Outputs(this);
  }
}

export class SetCapCall__Inputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }

  get newCap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCapCall__Outputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get newFeeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetWithdrawalFeeCall extends ethereum.Call {
  get inputs(): SetWithdrawalFeeCall__Inputs {
    return new SetWithdrawalFeeCall__Inputs(this);
  }

  get outputs(): SetWithdrawalFeeCall__Outputs {
    return new SetWithdrawalFeeCall__Outputs(this);
  }
}

export class SetWithdrawalFeeCall__Inputs {
  _call: SetWithdrawalFeeCall;

  constructor(call: SetWithdrawalFeeCall) {
    this._call = call;
  }

  get newWithdrawalFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWithdrawalFeeCall__Outputs {
  _call: SetWithdrawalFeeCall;

  constructor(call: SetWithdrawalFeeCall) {
    this._call = call;
  }
}

export class SunsetCall extends ethereum.Call {
  get inputs(): SunsetCall__Inputs {
    return new SunsetCall__Inputs(this);
  }

  get outputs(): SunsetCall__Outputs {
    return new SunsetCall__Outputs(this);
  }
}

export class SunsetCall__Inputs {
  _call: SunsetCall;

  constructor(call: SunsetCall) {
    this._call = call;
  }

  get upgradeTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SunsetCall__Outputs {
  _call: SunsetCall;

  constructor(call: SunsetCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawETHCall extends ethereum.Call {
  get inputs(): WithdrawETHCall__Inputs {
    return new WithdrawETHCall__Inputs(this);
  }

  get outputs(): WithdrawETHCall__Outputs {
    return new WithdrawETHCall__Outputs(this);
  }
}

export class WithdrawETHCall__Inputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawETHCall__Outputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }
}

export class WithdrawToV1VaultCall extends ethereum.Call {
  get inputs(): WithdrawToV1VaultCall__Inputs {
    return new WithdrawToV1VaultCall__Inputs(this);
  }

  get outputs(): WithdrawToV1VaultCall__Outputs {
    return new WithdrawToV1VaultCall__Outputs(this);
  }
}

export class WithdrawToV1VaultCall__Inputs {
  _call: WithdrawToV1VaultCall;

  constructor(call: WithdrawToV1VaultCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get vault(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawToV1VaultCall__Outputs {
  _call: WithdrawToV1VaultCall;

  constructor(call: WithdrawToV1VaultCall) {
    this._call = call;
  }
}
